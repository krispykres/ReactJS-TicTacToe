{"ast":null,"code":"import _slicedToArray from \"/Users/ian.kresyman/Documents/React Practice/react-tutorial/ReactJS-TicTacToe/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ian.kresyman/Documents/React Practice/react-tutorial/ReactJS-TicTacToe/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n/*\nclass Square extends React.Component {\n  //Here we are rendering buttons to use an onClick event to call the the onClick props in the Board component. The value is passed as the props value from the renderswuare method in the board component.\n  render() {\n    return (\n      <button\n       className=\"square\"\n       onClick={ () => this.props.onClick() }\n      >\n         {this.props.value}\n      </button>\n    );\n  }\n}\n*/\n//class component above converted into a functional component\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  //This method returns the Square component, passing down 2 props: value and onClick. The onClick prop is a function that the square component can call when clicked.\n  renderSquare(i) {\n    return React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    });\n  } //Here we are rendering the entire board, passing values to be accepted by our renderSquare function\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true\n    };\n  } //handleClick method to get the array, duplicate it and save it as squares, have the associated value of the position in the array be x, and update the state of the array to reflect the new value (X).\n  //State is now held in the board component instead of the square components\n\n\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice(); //This if statement allows the handleClick function to return early by ignoring a click if someone has won the game or if a Square is already filled.\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, status), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, moves)));\n  }\n\n} // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 145\n  },\n  __self: this\n}), document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/ian.kresyman/Documents/React Practice/react-tutorial/ReactJS-TicTacToe/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","state","history","Array","fill","xIsNext","handleClick","current","length","slice","calculateWinner","setState","concat","winner","moves","map","step","move","desc","jumpTo","status","document","getElementById","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n/*\nclass Square extends React.Component {\n  //Here we are rendering buttons to use an onClick event to call the the onClick props in the Board component. The value is passed as the props value from the renderswuare method in the board component.\n  render() {\n    return (\n      <button\n       className=\"square\"\n       onClick={ () => this.props.onClick() }\n      >\n         {this.props.value}\n      </button>\n    );\n  }\n}\n*/\n\n//class component above converted into a functional component\nfunction Square(props) {\n    return (\n      <button\n       className=\"square\"\n       onClick={ props.onClick }\n      >\n         {props.value}\n      </button>\n    )\n}\n\nclass Board extends React.Component {\n    \n  //This method returns the Square component, passing down 2 props: value and onClick. The onClick prop is a function that the square component can call when clicked.\n  renderSquare(i) {\n    return (\n    <Square\n      value={this.props.squares[i]}\n      onClick={ () => this.props.onClick(i) }\n    />\n    );\n  }\n\n  //Here we are rendering the entire board, passing values to be accepted by our renderSquare function\n  render() {\n\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n          history: [{\n              squares: Array(9).fill(null),\n          }],\n          xIsNext: true\n      };\n  }\n    \n  //handleClick method to get the array, duplicate it and save it as squares, have the associated value of the position in the array be x, and update the state of the array to reflect the new value (X).\n  //State is now held in the board component instead of the square components\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    //This if statement allows the handleClick function to return early by ignoring a click if someone has won the game or if a Square is already filled.\n    if (calculateWinner(squares) || squares[i]) {\n        return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n          squares: squares\n      }]),\n        xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n      \n    const moves = history.map((step, move) => {\n        const desc = move ?\n            'Go to move #' + move :\n            'Go to game start';\n        return (\n            <li>\n                <button onClick={ () => this.jumpTo(move)}>{desc}</button>\n            </li>\n        );\n    });\n      \n    let status;\n    if(winner) {\n        status = 'Winner: ' + winner; \n    } else {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n      \n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}